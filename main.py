import logging
import asyncio
from aiogram.utils.exceptions import BotBlocked
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import Dispatcher
from os import getenv
from sys import exit
import bot as nav
import Responses as R
import time

bot_token = getenv("BOT_TOKEN")
if not bot_token:
    exit("Error: no token provided")

bot = Bot(token=bot_token)
dp = Dispatcher(bot)

logging.basicConfig(level=logging.INFO)

print("PROGRAM START")
# –ø—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–∫–∏


@dp.message_handler(commands="block")
async def cmd_block(message: types.Message):
    await asyncio.sleep(10.0)  # –ó–¥–æ—Ä–æ–≤—ã–π —Å–æ–Ω –Ω–∞ 10 —Å–µ–∫—É–Ω–¥
    await message.reply("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã")


@dp.errors_handler(exception=BotBlocked)
async def error_bot_blocked(update: types.Update, exception: BotBlocked):
    # Update: –æ–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è –æ—Ç Telegram. Exception: –æ–±—ä–µ–∫—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∫–∞–∫-—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    print(f"–ú–µ–Ω—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n–°–æ–æ–±—â–µ–Ω–∏–µ: {update}\n–û—à–∏–±–∫–∞: {exception}")

    # –¢–∞–∫–æ–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–æ–ª–∂–µ–Ω –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å True,
    # –µ—Å–ª–∏ –¥–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
    return True


@dp.message_handler(commands="start")  # –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
async def cmd_test1(message: types.Message):  # await —Ç–µ–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    await message.reply("\t –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π!ü§ñ –ë–æ—Ç –¥–ª—è —É—á–µ–±—ã, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:"
                        " \n /start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã \n /help - üõ† –ø–æ–º–æ—â—å \n /faq - ‚Åâ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã \n"
                        " /remind-lesson - üîî –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –∑–∞–Ω—è—Ç–∏–∏ \n /remind-deadline - üîî –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –¥–µ–¥–ª–∞–π–Ω–µ \n "
                        "/education-result - üéì —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å\n"
                        " /education-material - üìöÔ∏è —É—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª \n"
                        " /test-check - üß© —Ç–µ—Å—Ç—ã –¥–ª—è —Å–∞–º–æ–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏\n"
                        " /congrats-student -  üèÜ —Ç–æ–ø —É—á–∞—â–∏—Ö—Å—è\n", reply_markup=nav.mainMenu)


@dp.message_handler(commands="help")  #  –ø–æ–º–æ—â—å
async def cmd_test1(message: types.Message):
    await message.reply("help is working")


@dp.message_handler(commands="faq")  # —Ç–∏–ø–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
async def cmd_test1(message: types.Message):  # await —Ç–µ–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    await message.reply("faq is working")


@dp.message_handler(commands="remind-lesson")  # –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –∑–∞–Ω—è—Ç–∏–∏
async def cmd_test1(message: types.Message):  # await —Ç–µ–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    await message.reply("remind-lesson is working")


@dp.message_handler(commands="remind-deadline")  # –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –¥–µ–¥–ª–∞–π–Ω–µ
async def cmd_test1(message: types.Message):  # await —Ç–µ–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    await message.reply("remind-deadline  is working")


@dp.message_handler(commands="test-check")   # —Ç–µ—Å—Ç—ã –¥–ª—è —Å–∞–º–æ–ø—Ä–æ–≤–µ—Ä–∫–∏
async def cmd_test1(message: types.Message):  # await —Çe–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    await message.reply("test-check is working")


@dp.message_handler(commands="education-result")   # –æ–± —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏
async def cmd_test1(message: types.Message):  # await —Çe–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    await message.reply("education-result is working")


@dp.message_handler(commands="education-material")  # —É—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
async def cmd_test1(message: types.Message):  # await —Çe–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    await message.reply("education-material is working")


@dp.message_handler(commands="congrats-student")  # –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ —Ç—ã —Ö–∞—Ä–æ—à
async def cmd_test1(message: types.Message):  # await —Çe–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    await message.reply("congrats-student is working")


@dp.message_handler()  #–ø–æ–∫–∞ —á—Ç–æ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ –æ–±—Ä–∞—â–∞–π—Ç–µ –≤–Ω–∏–º–∞–Ω–∏—è
async def cmd_test1(message: types.Message):
    if message.text == 'üõ† –ü–æ–º–æ—â—å':  #
        await message.reply("–ø–æ–º–æ—â—å")

    elif message.text == '‚Åâ –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã':  #
        await message.reply("—á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã")

    elif message.text == 'üîî –ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –∑–∞–Ω—è—Ç–∏–∏':  #
        await message.reply("–Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –∑–∞–Ω—è—Ç–∏–∏")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)



