import logging
import asyncio
from aiogram.utils.exceptions import BotBlocked
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import Dispatcher
from os import getenv
from sys import exit
import bot as nav
import Responses as R
import time

bot_token = getenv("BOT_TOKEN")
if not bot_token:
    exit("Error: no token provided")

bot = Bot(token=bot_token)
dp = Dispatcher(bot)

logging.basicConfig(level=logging.INFO)

print("PROGRAM START")
# –ø—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–∫–∏


@dp.message_handler(commands="block")
async def cmd_block(message: types.Message):
    await asyncio.sleep(10.0)  # –ó–¥–æ—Ä–æ–≤—ã–π —Å–æ–Ω –Ω–∞ 10 —Å–µ–∫—É–Ω–¥
    await message.reply("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã")


@dp.errors_handler(exception=BotBlocked)
async def error_bot_blocked(update: types.Update, exception: BotBlocked):
    # Update: –æ–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è –æ—Ç Telegram. Exception: –æ–±—ä–µ–∫—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∫–∞–∫-—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    print(f"–ú–µ–Ω—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n–°–æ–æ–±—â–µ–Ω–∏–µ: {update}\n–û—à–∏–±–∫–∞: {exception}")

    # –¢–∞–∫–æ–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–æ–ª–∂–µ–Ω –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å True,
    # –µ—Å–ª–∏ –¥–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
    return True


@dp.message_handler(commands="start")  # –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
async def cmd_test1(message: types.Message):  # await —Ç–µ–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    await message.reply("\t –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π!ü§ñ –ë–æ—Ç –¥–ª—è —É—á–µ–±—ã, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:"
                        " \n /start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã \n /help - üõ† –ø–æ–º–æ—â—å \n /faq - ‚Åâ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã \n"
                        " /remindlesson - üîî –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –∑–∞–Ω—è—Ç–∏–∏ \n /reminddeadline - üîî –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –¥–µ–¥–ª–∞–π–Ω–µ \n "
                        "/educationresult - üéì —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å\n"
                        " /educationmaterial - üìöÔ∏è —É—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª \n"
                        " /testcheck - üß© —Ç–µ—Å—Ç—ã –¥–ª—è —Å–∞–º–æ–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏\n"
                        " /congratsstudent -  üèÜ —Ç–æ–ø —É—á–∞—â–∏—Ö—Å—è\n", reply_markup=nav.mainMenu)

# –∫–æ–º–∞–Ω–¥—ã
@dp.message_handler(commands="help")  #  –ø–æ–º–æ—â—å
async def cmd_test1(message: types.Message):
    await helpOut(message)


@dp.message_handler(commands="faq")  # —Ç–∏–ø–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
async def cmd_test1(message: types.Message):  # await —Ç–µ–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    await faqOut(message)


@dp.message_handler(commands="remindlesson")  # –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –∑–∞–Ω—è—Ç–∏–∏
async def cmd_test1(message: types.Message):  # await —Ç–µ–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    await remlesOut(message)


@dp.message_handler(commands="reminddeadline")  # –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –¥–µ–¥–ª–∞–π–Ω–µ
async def cmd_test1(message: types.Message):  # await —Ç–µ–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    await remdeadOut(message)


@dp.message_handler(commands="testcheck")   # —Ç–µ—Å—Ç—ã –¥–ª—è —Å–∞–º–æ–ø—Ä–æ–≤–µ—Ä–∫–∏
async def cmd_test1(message: types.Message):  # await —Çe–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    await testcheckOut(message)


@dp.message_handler(commands="educationresult")   # –æ–± —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏
async def cmd_test1(message: types.Message):  # await —Çe–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    await eduresOut(message)


@dp.message_handler(commands="educationmaterial")  # —É—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
async def cmd_test1(message: types.Message):  # await —Çe–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    await edumatOut(message)


@dp.message_handler(commands="congratsstudent")  # –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ —Ç—ã —Ö–∞—Ä–æ—à
async def cmd_test1(message: types.Message):  # await —Çe–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    await congstuOut(message)


@dp.message_handler()
async def cmd_test1(message: types.Message):
    if message.text == 'üõ† –ü–æ–º–æ—â—å':  #–∫–Ω–æ–ø–æ—á–∫–∏, —Ç–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏ message  –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å
        await helpOut(message)
    elif message.text == '‚Åâ –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã':
        await faqOut(message)
    elif message.text == 'üß© –¢–µ—Å—Ç—ã':
        await testcheckOut(message)
    elif message.text == 'üîî –ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –∑–∞–Ω—è—Ç–∏–∏':
        await remlesOut(message)
    elif message.text == 'üîî –ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –¥–µ–¥–ª–∞–π–Ω–µ':
        await remdeadOut(message)
    elif message.text == 'üéì –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å':
        await eduresOut(message)
    elif message.text == 'üìöÔ∏è –£—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª':
        await edumatOut(message)
    elif message.text == 'üèÜ –¢–æ–ø':
        await congstuOut(message)
    elif message.text == '–î—Ä—É–≥–æ–µ ‚û°':
        await message.reply("–î—Ä—É–≥–æ–µ ‚û°", reply_markup=nav.otherMenu)
    elif message.text == '‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await message.reply("‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=nav.mainMenu)


# —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–æ –∏ –º–µ–Ω—é –∏ –∫–æ–º–∞–Ω–¥—ã
async def helpOut(message):
    await message.reply("help  is working")


async def faqOut(message):
    await message.reply("faq is working")


async def remlesOut(message):
    await message.reply("remind lesson is working")


async def remdeadOut(message):
    await message.reply("remind deadline is working")


async def testcheckOut(message):
    await message.reply("test is working:")


async def eduresOut(message):
    await message.reply("education result is working")


async def edumatOut(message):
    await message.reply("education material is working")


async def congstuOut(message):
    await message.reply("congrats is working")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)



